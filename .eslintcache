[{"C:\\Users\\Akshat Gupta\\Desktop\\nodefiles\\react-app\\react-complete-guide\\src\\index.js":"1","C:\\Users\\Akshat Gupta\\Desktop\\nodefiles\\react-app\\react-complete-guide\\src\\App.js":"2","C:\\Users\\Akshat Gupta\\Desktop\\nodefiles\\react-app\\react-complete-guide\\src\\reportWebVitals.js":"3","C:\\Users\\Akshat Gupta\\Desktop\\nodefiles\\react-app\\react-complete-guide\\src\\Person\\person.js":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":4341,"mtime":1609493236886,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":549,"mtime":1609493172645,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"19bjxbi",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Akshat Gupta\\Desktop\\nodefiles\\react-app\\react-complete-guide\\src\\index.js",[],["20","21"],"C:\\Users\\Akshat Gupta\\Desktop\\nodefiles\\react-app\\react-complete-guide\\src\\App.js",["22"],"import React, { useState, Component } from 'react'\nimport './App.css';\nimport Person from './Person/person'\nimport Radium,{StyleRoot} from 'radium'\n\n// In useState  setPersonStare will repleace with old one\n// where as state is class will merge with old data when setState calls\n// const App = props => {\n//   const [personState,setPersonState] = useState({\n//     persons:[\n//       {name: \"Akshat\", age: 20},\n//       {name: \"Aayush\", age: 16},\n//       {name: \"Jyoti\", age: 45}\n//     ]\n//   });\n\n//   const [otherState, setOtherState] = useState(\"This is some other state data\");\n\n//   console.log(personState,otherState)\n\n//   const switchNameHandler = () => {\n//     setPersonState({\n//       persons:[\n//         {name: \"Akshat gupta\", age: 20},\n//         {name: \"Aayush\", age: 16},\n//         {name: \"Jyoti\", age: 45}\n//       ]\n//     })\n//   }\n\n//   return(\n//     <div className=\"App\">\n//       <h1>Hi, I am Akshat Gupta</h1>\n//       <button onClick={switchNameHandler}>Switch Name</button>\n//       <Person name={personState.persons[0].name} age={personState.persons[0].age} >My hobbies: Racing</Person>\n//       <Person name={personState.persons[1].name} age={personState.persons[1].age} />\n//       <Person name={personState.persons[2].name} age={personState.persons[2].age} />\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n\n//  THIS IS HOW CLASS WORKS\nclass App extends Component {\n  state = {\n    persons: [\n      {id: 'flkjdf',name: \"One\", age: 1},\n      {id: 'rqklk',name: \"two\", age: 2},\n      {id: 'fqlkf;',name: \"three\", age: 3}\n    ],\n    otherState: \"This is other state\",\n    showPersons: false\n  }\n\n  deletePersonHandler = (personIndex) => {\n    // const persons = this.state.persons;  If we use this then person pointer will point to the original \n    // state.person array the when we do splice in next line then it delete from original array without setStart\n    // Instead of that we can use persons = this.state.persons.slice();\n    const persons = [...this.state.persons];\n    persons.splice(personIndex,1);\n    this.setState({\n      persons: persons\n    })\n  }\n\n  nameChangedHandler = (event, id) => {\n    const personIndex = this.state.persons.findIndex(p => {\n      return p.id === id;\n    })\n\n    const person = {\n      ...this.state.persons[personIndex]\n    }\n    person.name = event.target.value;\n\n    const persons = [...this.state.persons];\n    persons[personIndex] = person;\n\n    this.setState({\n      persons: persons\n    })\n  }\n\n  togglePersonHandler = () => { \n    // const doesShow = this.state.showPersons;\n    // console.log(doesShow)\n    this.setState({\n      showPersons: !this.state.showPersons\n    })\n  }\n\n  render(){\n    // This is inline style\n    const style = {\n      backgroundColor: 'green',\n      color: 'white',\n      font: 'inherit',\n      border: '1px solid blue',\n      padding: '8px',\n      cursor: 'pointer',\n      ':hover':{\n        backgroundColor: 'lightgreen',\n        color:'black'\n      }\n    };\n    \n    let persons = null;\n    if(this.state.showPersons){\n      persons = (\n        <div>\n          {this.state.persons.map((person, index) => {\n            return <Person \n            name={person.name} \n            age={person.age} \n            click = {() => {this.deletePersonHandler(index)}} \n            changed = {(event) => this.nameChangedHandler(event,person.id)}\n            key={person.id} />\n          })}\n        </div>\n      );\n\n      style.backgroundColor = 'red';\n      style[':hover'] = {\n        backgroundColor: 'salmon',\n        color: 'black'\n      }\n    }\n\n    const classes = [];\n    if(this.state.persons.length <= 2){\n      classes.push('red');\n    }\n    if(this.state.persons.length <= 1){\n      classes.push('bold');\n    }\n    \n\n    return(\n      <StyleRoot>\n      <div className=\"App\">\n        <h1>Hi, I am Akshat Gupta</h1>\n        <p className={classes.join(' ')}>This is really working</p>\n        <button \n            // onClick={() => this.switchNameHandler(\"Akshat gupta\")} // Inefficient way to do so\n            onClick = {this.togglePersonHandler}\n            style={style}> \n            Switch Name\n        </button>\n        {persons}\n      </div>\n      </StyleRoot>\n    );\n    // return React.createElement('div',{className:'App'},React.createElement('h1',null,'Hi, I\\'m Akshat Gupta'));\n  }\n}\n\nexport default Radium(App);\n","C:\\Users\\Akshat Gupta\\Desktop\\nodefiles\\react-app\\react-complete-guide\\src\\reportWebVitals.js",[],"C:\\Users\\Akshat Gupta\\Desktop\\nodefiles\\react-app\\react-complete-guide\\src\\Person\\person.js",[],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":1,"column":17,"nodeType":"29","messageId":"30","endLine":1,"endColumn":25},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]